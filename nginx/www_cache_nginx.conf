user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
    multi_accept        on;
    use                 epoll;
}

http {
    real_ip_header X-Forwarded-For;
    set_real_ip_from 192.0.2.0/24;

    resolver 192.0.2.2;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main buffer=16k;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   15;
    types_hash_max_size 2048;
	server_tokens off;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    proxy_cache_path  /var/lib/nginx/cache  levels=1:2   keys_zone=staticfilecache:180m  max_size=500m;
    proxy_temp_path /var/lib/nginx/proxy;
    proxy_connect_timeout 30;
    proxy_read_timeout 120;
    proxy_send_timeout 120;

    proxy_cache_key "$scheme://$host$request_uri";

    upstream wordpress {
        server internal-elb-hostname:80;
    }

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /var/www/html;

        location /elb-healthcheck-cache-298fvd78.html {
            #Bypass proxy - used by load balancer health check
        }

        location / {

            set $redirect_to_https 0;
            if ($http_x_forwarded_proto != 'https') {
                set $redirect_to_https 1;
            }

            if ($request_uri = '/elb-healthcheck-cache-298fvd78.html') {
                set $redirect_to_https 0;
            }

            if ($redirect_to_https = 1) {
                rewrite ^ https://$host$request_uri? permanent;
            }

            # If logged in, don't cache.
            if ($http_cookie ~* "comment_author_|wordpress_(?!test_cookie)|wp-postpass_" ) {
                set $do_not_cache 1;
            }
            proxy_set_header Host $host;           
            proxy_cache_key "$scheme://$host$request_uri $do_not_cache";
            proxy_cache staticfilecache;
            proxy_pass http://wordpress;
            proxy_cache_valid    200    1d;
            proxy_redirect off;
            proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
            add_header X-Cache-Status $upstream_cache_status;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
}
